name: Up

on:
  #  push:
  #    branches:
  #      - master
  
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - unlocked

jobs:
  
  
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    
    steps:
#      - name: Dump GitHub context
      #        env:
      #          GITHUB_CONTEXT: ${{ toJson(github) }}
      #        run: echo "$GITHUB_CONTEXT"
  
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Install .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      
      - name: Terraform Format
        id: fmt
        working-directory: ${{ github.workspace }}/infrastructure
        run: terraform fmt -check
      
      #      - name: Azure Login
      #        uses: azure/login@v1
      #        with:
      #          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Terraform Init
        id: init
        working-directory: ${{ github.workspace }}/infrastructure
        run: |
          terraform init \
            -backend-config "key=PR-${{ github.event.pull_request.number }}" \
            -backend-config "resource_group_name=${{ secrets.TFSTATE_RG }}" \
            -backend-config "storage_account_name=${{ secrets.TFSTATE_SA_NAME }}" \
            -backend-config "container_name=${{ secrets.TFSTATE_CONTAINER_NAME }}"

      - name: Terraform Validate
        id: validate
        working-directory: ${{ github.workspace }}/infrastructure
        run: |
          unset t_std t_err
  
          eval "$( terraform validate -no-color \
                  2> >(t_err=$(cat); typeset -p t_err) \
                   > >(t_std=$(cat); typeset -p t_std) )"
  
          t_err="${t_err//'%'/'%25'}"
          t_err="${t_err//$'\n'/'%0A'}"
          t_err="${t_err//$'\r'/'%0D'}"
  
          echo "::set-output name=stderr::$t_err"
  
          t_std="${t_std//'%'/'%25'}"
          t_std="${t_std//$'\n'/'%0A'}"
          t_std="${t_std//$'\r'/'%0D'}"
  
          echo "::set-output name=stdout::$t_std"
  
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        working-directory: ${{ github.workspace }}/infrastructure
        continue-on-error: true
        run: |
          unset t_std t_err
    
          eval "$( terraform plan -no-color -var 'pr-number=${{ github.event.pull_request.number }}' \
                  2> >(t_err=$(cat); typeset -p t_err) \
                   > >(t_std=$(cat); typeset -p t_std) )"
    
          t_err="${t_err//'%'/'%25'}"
          t_err="${t_err//$'\n'/'%0A'}"
          t_err="${t_err//$'\r'/'%0D'}"
    
          echo "::set-output name=stderr::$t_err"
    
          t_std="${t_std//'%'/'%25'}"
          t_std="${t_std//$'\n'/'%0A'}"
          t_std="${t_std//$'\r'/'%0D'}"
    
          echo "::set-output name=stdout::$t_std"
  
      - name: Comment PR with Terraform status
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stderr }}\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ ${{ steps.validate.outputs.stderr }}${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`${{ env.PLAN }}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Apply
        id: apply
        working-directory: ${{ github.workspace }}/infrastructure
        run: |
          terraform apply -auto-approve \
            -var 'pr-number=${{ github.event.pull_request.number }}'
      
      - name: Terraform get outputs
        id: terraform-outputs
        working-directory: ${{ github.workspace }}/infrastructure
        run: |
          echo "::set-output name=AZURE_RBAC_CREDENTIALS::$(terraform output -raw sdk-auth)"
          echo "::set-output name=AZURE_FUNCTIONAPP_NAME::$(terraform output -raw azure-function-name)"
  
  
      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ steps.terraform-outputs.outputs.AZURE_RBAC_CREDENTIALS }}
  
      - name: Dotnet build
        run: dotnet build --configuration Release --output ./publish-output
  
      - name: Deploy Azure Function
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ steps.terraform-outputs.outputs.AZURE_FUNCTIONAPP_NAME }}
          package: ./publish-output
  
      - name: Comment PR with URL
        uses: actions/github-script@0.9.0
        if: github.event.action == 'opened' || github.event.action == 'reopened'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Feature environment base URL:
            https://${{ steps.terraform-outputs.outputs.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/hello-medium`;
      
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          